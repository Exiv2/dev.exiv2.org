Index: src/actions.cpp
===================================================================
diff --git a/trunk/src/actions.cpp b/trunk/src/actions.cpp
--- a/trunk/src/actions.cpp	(revision 3251)
+++ b/trunk/src/actions.cpp	(working copy)
@@ -355,6 +355,8 @@
         }
         if (!done) {
             done = 0 != printTag(exifData, "Exif.CanonSi.SubjectDistance");
+            done = 0 != printTag(exifData, "Exif.CanonSi.FocusDistanceLower");
+            done = 0 != printTag(exifData, "Exif.CanonSi.FocusDistanceUpper");
         }
         std::cout << std::endl;
 
Index: src/canonmn.cpp
===================================================================
diff --git a/trunk/src/canonmn.cpp b/trunk/src/canonmn.cpp
--- a/trunk/src/canonmn.cpp	(revision 3251)
+++ b/trunk/src/canonmn.cpp	(working copy)
@@ -1283,6 +1283,8 @@
         TagInfo(0x000f, "ToningEffect", N_("Toning Effect"), N_("Toning Effect"), canonFiId, makerTags, signedShort, 1, EXV_PRINT_TAG(canonToningEffect)),
         TagInfo(0x0010, "MacroMagnification", N_("Macro Magnification"), N_("Macro magnification"), canonFiId, makerTags, signedShort, 1, printValue),
         TagInfo(0x0013, "LiveViewShooting", N_("Live View Shooting"), N_("Live view shooting"), canonFiId, makerTags, signedShort, 1, EXV_PRINT_TAG(canonOffOn)),
+        TagInfo(0x0014, "FocusDistanceUpper", N_("Focus Distance Upper"), N_("Focus Distance Upper"), canonFiId, makerTags, signedShort, 1, printFiFocusDistance),
+        TagInfo(0x0015, "FocusDistanceLower", N_("Focus Distance Lower"), N_("Focus Distance Lower"), canonFiId, makerTags, signedShort, 1, printFiFocusDistance),
         TagInfo(0x0019, "FlashExposureLock", N_("Flash Exposure Lock"), N_("Flash exposure lock"), canonFiId, makerTags, signedShort, 1, EXV_PRINT_TAG(canonOffOn)),
         // End of list marker
         TagInfo(0xffff, "(UnknownCanonFiTag)", "(UnknownCanonFiTag)", N_("Unknown Canon File Info tag"), canonFiId, makerTags, signedShort, 1, printValue)
@@ -1701,6 +1703,29 @@
         return os;
     }
 
+    std::ostream& CanonMakerNote::printFiFocusDistance(std::ostream& os,
+                                                       const Value& value,
+                                                       const ExifData*)
+    {
+       if (   value.typeId() != signedShort
+         || value.count() == 0) return os << value;
+
+      std::ostringstream oss;
+      oss.copyfmt(os);
+      os << std::fixed << std::setprecision(2);
+
+      long l = value.toLong();
+      if (l == 0xffff) {
+        os << "Infinite";
+      }
+      else {
+        os << value.toLong()/100.0 << " m";
+      }
+
+      os.copyfmt(oss);
+      return os;
+    }
+
 // *****************************************************************************
 // free functions
 
Index: src/canonmn_int.hpp
===================================================================
diff --git a/trunk/src/canonmn_int.hpp b/trunk/src/canonmn_int.hpp
--- a/trunk/src/canonmn_int.hpp	(revision 3251)
+++ b/trunk/src/canonmn_int.hpp	(working copy)
@@ -106,6 +106,8 @@
         static std::ostream& printSi0x0016(std::ostream& os, const Value& value, const ExifData*);
         //! MeasuredEV2
         static std::ostream& printSi0x0017(std::ostream& os, const Value& value, const ExifData*);
+        //! Focus Distance
+        static std::ostream& printFiFocusDistance(std::ostream& os, const Value& value, const ExifData*);
         //@}
 
     private:
Index: src/easyaccess.cpp
===================================================================
diff --git a/trunk/src/easyaccess.cpp b/trunk/src/easyaccess.cpp
--- a/trunk/src/easyaccess.cpp	(revision 3251)
+++ b/trunk/src/easyaccess.cpp	(working copy)
@@ -414,6 +414,8 @@
             "Exif.Photo.SubjectDistance",
             "Exif.Image.SubjectDistance",
             "Exif.CanonSi.SubjectDistance",
+            "Exif.CanonFi.FocusDistanceUpper",
+            "Exif.CanonFi.FocusDistanceLower",
             "Exif.MinoltaCsNew.FocusDistance",
             "Exif.Nikon1.FocusDistance",
             "Exif.Nikon3.FocusDistance",
